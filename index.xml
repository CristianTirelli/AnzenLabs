<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Anzen Labs</title><link>https://anzenlabs.com/</link><description>Recent content on Anzen Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 16 Apr 2022 14:36:47 +0200</lastBuildDate><atom:link href="https://anzenlabs.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting the hang of polyhedral compilation</title><link>https://anzenlabs.com/posts/2022/poly/intro/</link><pubDate>Sat, 16 Apr 2022 14:36:47 +0200</pubDate><guid>https://anzenlabs.com/posts/2022/poly/intro/</guid><description>The polyhedral model is an optimization and parallelization technique used to speed up the execution of loops. The main idea is to create a mathematical abstraction of a program and use it to exploit the target device&amp;rsquo;s architecture through the design of sophisticated optimization heuristics. It&amp;rsquo;s called polyhedral compilation, but modeling through polyhedra is neither required nor sufficient, in fact it is possible to obtain the same optimizations with other techniques.</description></item></channel></rss>